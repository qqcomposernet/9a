def func1(arg1, arg2):
    var3 = func4()
    var4 = func7()
    var9 = func8(arg2, var4)
    var39 = var12(var4, var3)
    if var39 < var9:
        var44 = class12()
    else:
        var44 = class14()
    for var45 in xrange(32):
        var44.func13(arg2, arg1)
    var46 = (arg1 - var39 | arg2) + var9
    var47 = (-953235430 & var39) & (var9 & var39)
    var48 = var46 & arg2
    var49 = var3 + ((var48 | var48) - var4)
    var50 = var39 - var4
    var51 = ((arg2 - var3) | arg1) ^ var4
    var52 = arg2 | arg1
    var53 = var46 + ((var50 | -1974924000) - var46)
    var54 = arg2 ^ (var51 & var9)
    var55 = var48 + var50 + var51 ^ var9
    var56 = var46 ^ var52
    result = (arg1 | var48 ^ var49) & var53 ^ var39 ^ var51 - arg2 - arg2 - var4
    return result
class class14(object):
    def func13(self, arg42, arg43):
        result = arg42 + arg42
        return result
class class12(object):
    def func13(self, arg40, arg41):
        return 0
def func11(arg13, arg14):
    var15 = arg14 & (792868112 | -757 ^ 1287072858)
    if arg13 < var15:
        var16 = -67820944 - 129006027 ^ (748 - -820)
    else:
        var16 = (38 - -361 | -969) + arg13
    var17 = var15 & arg14 - var15 | var15
    var18 = var15 & 677 - arg13 ^ 164
    var19 = (-1822936242 & arg14 ^ arg13) ^ var17
    var20 = var19 | var18 + var15 ^ var18
    var21 = arg13 | var20
    var22 = (314 ^ var17 | var17) ^ var17
    var23 = (var17 - var22 ^ var15) & var18
    var24 = (var19 & var18 | var15) ^ var19
    var25 = (var15 + var20 | var20) - var24
    var26 = var24 - var18
    var27 = var17 - var26 + var23 - var19
    var28 = arg13 + -153269841
    var29 = var17 ^ var27 | var28 | var18
    var30 = (var19 ^ var18) - var28 + 1916630973
    var31 = (var18 ^ (var28 & var21)) - 273
    var32 = var17 + var25
    var33 = var15 - var22
    var34 = (var18 + arg14 + var33) | var29
    var35 = (var30 & var23) | var21
    var36 = (var21 & var32 + var23) | var15
    var37 = var36 ^ var31 | arg14
    var38 = var23 ^ var31
    result = var30 | var37
    return result
def func10():
    closure = [-4]
    def func9(arg10, arg11):
        closure[0] += func11(arg10, arg11)
        return closure[0]
    func = func9
    return func
var12 = func10()
def func8(arg5, arg6):
    var7 = 0
    for var8 in range(32):
        var7 += var7 | arg5 ^ -1
    return var7
def func7():
    func5()
    result = len(range(24))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -3
def func4():
    func2()
    result = len(range(14))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var4 = func7()
    var9 = func8(arg2, var4)
    var39 = var12(var4, var3)
    if var39 < var9:
        var44 = class12()
    else:
        var44 = class14()
    for var45 in xrange(32):
        var44.func13(arg2, arg1)
    var46 = (arg1 - var39 | arg2) + var9
    var47 = (-953235430 & var39) & (var9 & var39)
    var48 = var46 & arg2
    var49 = var3 + ((var48 | var48) - var4)
    var50 = var39 - var4
    var51 = ((arg2 - var3) | arg1) ^ var4
    var52 = arg2 | arg1
    var53 = var46 + ((var50 | -1974924000) - var46)
    var54 = arg2 ^ (var51 & var9)
    var55 = var48 + var50 + var51 ^ var9
    var56 = var46 ^ var52
    result = (arg1 | var48 ^ var49) & var53 ^ var39 ^ var51 - arg2 - arg2 - var4
    return result
class class14(object):
    def func13(self, arg42, arg43):
        result = arg42 + arg42
        return result
class class12(object):
    def func13(self, arg40, arg41):
        return 0
def func11(arg13, arg14):
    var15 = arg14 & (792868112 | -757 ^ 1287072858)
    if arg13 < var15:
        var16 = -67820944 - 129006027 ^ (748 - -820)
    else:
        var16 = (38 - -361 | -969) + arg13
    var17 = var15 & arg14 - var15 | var15
    var18 = var15 & 677 - arg13 ^ 164
    var19 = (-1822936242 & arg14 ^ arg13) ^ var17
    var20 = var19 | var18 + var15 ^ var18
    var21 = arg13 | var20
    var22 = (314 ^ var17 | var17) ^ var17
    var23 = (var17 - var22 ^ var15) & var18
    var24 = (var19 & var18 | var15) ^ var19
    var25 = (var15 + var20 | var20) - var24
    var26 = var24 - var18
    var27 = var17 - var26 + var23 - var19
    var28 = arg13 + -153269841
    var29 = var17 ^ var27 | var28 | var18
    var30 = (var19 ^ var18) - var28 + 1916630973
    var31 = (var18 ^ (var28 & var21)) - 273
    var32 = var17 + var25
    var33 = var15 - var22
    var34 = (var18 + arg14 + var33) | var29
    var35 = (var30 & var23) | var21
    var36 = (var21 & var32 + var23) | var15
    var37 = var36 ^ var31 | arg14
    var38 = var23 ^ var31
    result = var30 | var37
    return result
def func10():
    closure = [-4]
    def func9(arg10, arg11):
        closure[0] += func11(arg10, arg11)
        return closure[0]
    func = func9
    return func
var12 = func10()
def func8(arg5, arg6):
    var7 = 0
    for var8 in range(32):
        var7 += var7 | arg5 ^ -1
    return var7
def func7():
    func5()
    result = len(range(24))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -3
def func4():
    func2()
    result = len(range(14))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var4 = func7()
    var9 = func8(arg2, var4)
    var39 = var12(var4, var3)
    if var39 < var9:
        var44 = class12()
    else:
        var44 = class14()
    for var45 in xrange(32):
        var44.func13(arg2, arg1)
    var46 = (arg1 - var39 | arg2) + var9
    var47 = (-953235430 & var39) & (var9 & var39)
    var48 = var46 & arg2
    var49 = var3 + ((var48 | var48) - var4)
    var50 = var39 - var4
    var51 = ((arg2 - var3) | arg1) ^ var4
    var52 = arg2 | arg1
    var53 = var46 + ((var50 | -1974924000) - var46)
    var54 = arg2 ^ (var51 & var9)
    var55 = var48 + var50 + var51 ^ var9
    var56 = var46 ^ var52
    result = (arg1 | var48 ^ var49) & var53 ^ var39 ^ var51 - arg2 - arg2 - var4
    return result
class class14(object):
    def func13(self, arg42, arg43):
        result = arg42 + arg42
        return result
class class12(object):
    def func13(self, arg40, arg41):
        return 0
def func11(arg13, arg14):
    var15 = arg14 & (792868112 | -757 ^ 1287072858)
    if arg13 < var15:
        var16 = -67820944 - 129006027 ^ (748 - -820)
    else:
        var16 = (38 - -361 | -969) + arg13
    var17 = var15 & arg14 - var15 | var15
    var18 = var15 & 677 - arg13 ^ 164
    var19 = (-1822936242 & arg14 ^ arg13) ^ var17
    var20 = var19 | var18 + var15 ^ var18
    var21 = arg13 | var20
    var22 = (314 ^ var17 | var17) ^ var17
    var23 = (var17 - var22 ^ var15) & var18
    var24 = (var19 & var18 | var15) ^ var19
    var25 = (var15 + var20 | var20) - var24
    var26 = var24 - var18
    var27 = var17 - var26 + var23 - var19
    var28 = arg13 + -153269841
    var29 = var17 ^ var27 | var28 | var18
    var30 = (var19 ^ var18) - var28 + 1916630973
    var31 = (var18 ^ (var28 & var21)) - 273
    var32 = var17 + var25
    var33 = var15 - var22
    var34 = (var18 + arg14 + var33) | var29
    var35 = (var30 & var23) | var21
    var36 = (var21 & var32 + var23) | var15
    var37 = var36 ^ var31 | arg14
    var38 = var23 ^ var31
    result = var30 | var37
    return result
def func10():
    closure = [-4]
    def func9(arg10, arg11):
        closure[0] += func11(arg10, arg11)
        return closure[0]
    func = func9
    return func
var12 = func10()
def func8(arg5, arg6):
    var7 = 0
    for var8 in range(32):
        var7 += var7 | arg5 ^ -1
    return var7
def func7():
    func5()
    result = len(range(24))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -3
def func4():
    func2()
    result = len(range(14))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var4 = func7()
    var9 = func8(arg2, var4)
    var39 = var12(var4, var3)
    if var39 < var9:
        var44 = class12()
    else:
        var44 = class14()
    for var45 in xrange(32):
        var44.func13(arg2, arg1)
    var46 = (arg1 - var39 | arg2) + var9
    var47 = (-953235430 & var39) & (var9 & var39)
    var48 = var46 & arg2
    var49 = var3 + ((var48 | var48) - var4)
    var50 = var39 - var4
    var51 = ((arg2 - var3) | arg1) ^ var4
    var52 = arg2 | arg1
    var53 = var46 + ((var50 | -1974924000) - var46)
    var54 = arg2 ^ (var51 & var9)
    var55 = var48 + var50 + var51 ^ var9
    var56 = var46 ^ var52
    result = (arg1 | var48 ^ var49) & var53 ^ var39 ^ var51 - arg2 - arg2 - var4
    return result
class class14(object):
    def func13(self, arg42, arg43):
        result = arg42 + arg42
        return result
class class12(object):
    def func13(self, arg40, arg41):
        return 0
def func11(arg13, arg14):
    var15 = arg14 & (792868112 | -757 ^ 1287072858)
    if arg13 < var15:
        var16 = -67820944 - 129006027 ^ (748 - -820)
    else:
        var16 = (38 - -361 | -969) + arg13
    var17 = var15 & arg14 - var15 | var15
    var18 = var15 & 677 - arg13 ^ 164
    var19 = (-1822936242 & arg14 ^ arg13) ^ var17
    var20 = var19 | var18 + var15 ^ var18
    var21 = arg13 | var20
    var22 = (314 ^ var17 | var17) ^ var17
    var23 = (var17 - var22 ^ var15) & var18
    var24 = (var19 & var18 | var15) ^ var19
    var25 = (var15 + var20 | var20) - var24
    var26 = var24 - var18
    var27 = var17 - var26 + var23 - var19
    var28 = arg13 + -153269841
    var29 = var17 ^ var27 | var28 | var18
    var30 = (var19 ^ var18) - var28 + 1916630973
    var31 = (var18 ^ (var28 & var21)) - 273
    var32 = var17 + var25
    var33 = var15 - var22
    var34 = (var18 + arg14 + var33) | var29
    var35 = (var30 & var23) | var21
    var36 = (var21 & var32 + var23) | var15
    var37 = var36 ^ var31 | arg14
    var38 = var23 ^ var31
    result = var30 | var37
    return result
def func10():
    closure = [-4]
    def func9(arg10, arg11):
        closure[0] += func11(arg10, arg11)
        return closure[0]
    func = func9
    return func
var12 = func10()
def func8(arg5, arg6):
    var7 = 0
    for var8 in range(32):
        var7 += var7 | arg5 ^ -1
    return var7
def func7():
    func5()
    result = len(range(24))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -3
def func4():
    func2()
    result = len(range(14))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var4 = func7()
    var9 = func8(arg2, var4)
    var39 = var12(var4, var3)
    if var39 < var9:
        var44 = class12()
    else:
        var44 = class14()
    for var45 in xrange(32):
        var44.func13(arg2, arg1)
    var46 = (arg1 - var39 | arg2) + var9
    var47 = (-953235430 & var39) & (var9 & var39)
    var48 = var46 & arg2
    var49 = var3 + ((var48 | var48) - var4)
    var50 = var39 - var4
    var51 = ((arg2 - var3) | arg1) ^ var4
    var52 = arg2 | arg1
    var53 = var46 + ((var50 | -1974924000) - var46)
    var54 = arg2 ^ (var51 & var9)
    var55 = var48 + var50 + var51 ^ var9
    var56 = var46 ^ var52
    result = (arg1 | var48 ^ var49) & var53 ^ var39 ^ var51 - arg2 - arg2 - var4
    return result
class class14(object):
    def func13(self, arg42, arg43):
        result = arg42 + arg42
        return result
class class12(object):
    def func13(self, arg40, arg41):
        return 0
def func11(arg13, arg14):
    var15 = arg14 & (792868112 | -757 ^ 1287072858)
    if arg13 < var15:
        var16 = -67820944 - 129006027 ^ (748 - -820)
    else:
        var16 = (38 - -361 | -969) + arg13
    var17 = var15 & arg14 - var15 | var15
    var18 = var15 & 677 - arg13 ^ 164
    var19 = (-1822936242 & arg14 ^ arg13) ^ var17
    var20 = var19 | var18 + var15 ^ var18
    var21 = arg13 | var20
    var22 = (314 ^ var17 | var17) ^ var17
    var23 = (var17 - var22 ^ var15) & var18
    var24 = (var19 & var18 | var15) ^ var19
    var25 = (var15 + var20 | var20) - var24
    var26 = var24 - var18
    var27 = var17 - var26 + var23 - var19
    var28 = arg13 + -153269841
    var29 = var17 ^ var27 | var28 | var18
    var30 = (var19 ^ var18) - var28 + 1916630973
    var31 = (var18 ^ (var28 & var21)) - 273
    var32 = var17 + var25
    var33 = var15 - var22
    var34 = (var18 + arg14 + var33) | var29
    var35 = (var30 & var23) | var21
    var36 = (var21 & var32 + var23) | var15
    var37 = var36 ^ var31 | arg14
    var38 = var23 ^ var31
    result = var30 | var37
    return result
def func10():
    closure = [-4]
    def func9(arg10, arg11):
        closure[0] += func11(arg10, arg11)
        return closure[0]
    func = func9
    return func
var12 = func10()
def func8(arg5, arg6):
    var7 = 0
    for var8 in range(32):
        var7 += var7 | arg5 ^ -1
    return var7
def func7():
    func5()
    result = len(range(24))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -3
def func4():
    func2()
    result = len(range(14))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var4 = func7()
    var9 = func8(arg2, var4)
    var39 = var12(var4, var3)
    if var39 < var9:
        var44 = class12()
    else:
        var44 = class14()
    for var45 in xrange(32):
        var44.func13(arg2, arg1)
    var46 = (arg1 - var39 | arg2) + var9
    var47 = (-953235430 & var39) & (var9 & var39)
    var48 = var46 & arg2
    var49 = var3 + ((var48 | var48) - var4)
    var50 = var39 - var4
    var51 = ((arg2 - var3) | arg1) ^ var4
    var52 = arg2 | arg1
    var53 = var46 + ((var50 | -1974924000) - var46)
    var54 = arg2 ^ (var51 & var9)
    var55 = var48 + var50 + var51 ^ var9
    var56 = var46 ^ var52
    result = (arg1 | var48 ^ var49) & var53 ^ var39 ^ var51 - arg2 - arg2 - var4
    return result
class class14(object):
    def func13(self, arg42, arg43):
        result = arg42 + arg42
        return result
class class12(object):
    def func13(self, arg40, arg41):
        return 0
def func11(arg13, arg14):
    var15 = arg14 & (792868112 | -757 ^ 1287072858)
    if arg13 < var15:
        var16 = -67820944 - 129006027 ^ (748 - -820)
    else:
        var16 = (38 - -361 | -969) + arg13
    var17 = var15 & arg14 - var15 | var15
    var18 = var15 & 677 - arg13 ^ 164
    var19 = (-1822936242 & arg14 ^ arg13) ^ var17
    var20 = var19 | var18 + var15 ^ var18
    var21 = arg13 | var20
    var22 = (314 ^ var17 | var17) ^ var17
    var23 = (var17 - var22 ^ var15) & var18
    var24 = (var19 & var18 | var15) ^ var19
    var25 = (var15 + var20 | var20) - var24
    var26 = var24 - var18
    var27 = var17 - var26 + var23 - var19
    var28 = arg13 + -153269841
    var29 = var17 ^ var27 | var28 | var18
    var30 = (var19 ^ var18) - var28 + 1916630973
    var31 = (var18 ^ (var28 & var21)) - 273
    var32 = var17 + var25
    var33 = var15 - var22
    var34 = (var18 + arg14 + var33) | var29
    var35 = (var30 & var23) | var21
    var36 = (var21 & var32 + var23) | var15
    var37 = var36 ^ var31 | arg14
    var38 = var23 ^ var31
    result = var30 | var37
    return result
def func10():
    closure = [-4]
    def func9(arg10, arg11):
        closure[0] += func11(arg10, arg11)
        return closure[0]
    func = func9
    return func
var12 = func10()
def func8(arg5, arg6):
    var7 = 0
    for var8 in range(32):
        var7 += var7 | arg5 ^ -1
    return var7
def func7():
    func5()
    result = len(range(24))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -3
def func4():
    func2()
    result = len(range(14))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var4 = func7()
    var9 = func8(arg2, var4)
    var39 = var12(var4, var3)
    if var39 < var9:
        var44 = class12()
    else:
        var44 = class14()
    for var45 in xrange(32):
        var44.func13(arg2, arg1)
    var46 = (arg1 - var39 | arg2) + var9
    var47 = (-953235430 & var39) & (var9 & var39)
    var48 = var46 & arg2
    var49 = var3 + ((var48 | var48) - var4)
    var50 = var39 - var4
    var51 = ((arg2 - var3) | arg1) ^ var4
    var52 = arg2 | arg1
    var53 = var46 + ((var50 | -1974924000) - var46)
    var54 = arg2 ^ (var51 & var9)
    var55 = var48 + var50 + var51 ^ var9
    var56 = var46 ^ var52
    result = (arg1 | var48 ^ var49) & var53 ^ var39 ^ var51 - arg2 - arg2 - var4
    return result
class class14(object):
    def func13(self, arg42, arg43):
        result = arg42 + arg42
        return result
class class12(object):
    def func13(self, arg40, arg41):
        return 0
def func11(arg13, arg14):
    var15 = arg14 & (792868112 | -757 ^ 1287072858)
    if arg13 < var15:
        var16 = -67820944 - 129006027 ^ (748 - -820)
    else:
        var16 = (38 - -361 | -969) + arg13
    var17 = var15 & arg14 - var15 | var15
    var18 = var15 & 677 - arg13 ^ 164
    var19 = (-1822936242 & arg14 ^ arg13) ^ var17
    var20 = var19 | var18 + var15 ^ var18
    var21 = arg13 | var20
    var22 = (314 ^ var17 | var17) ^ var17
    var23 = (var17 - var22 ^ var15) & var18
    var24 = (var19 & var18 | var15) ^ var19
    var25 = (var15 + var20 | var20) - var24
    var26 = var24 - var18
    var27 = var17 - var26 + var23 - var19
    var28 = arg13 + -153269841
    var29 = var17 ^ var27 | var28 | var18
    var30 = (var19 ^ var18) - var28 + 1916630973
    var31 = (var18 ^ (var28 & var21)) - 273
    var32 = var17 + var25
    var33 = var15 - var22
    var34 = (var18 + arg14 + var33) | var29
    var35 = (var30 & var23) | var21
    var36 = (var21 & var32 + var23) | var15
    var37 = var36 ^ var31 | arg14
    var38 = var23 ^ var31
    result = var30 | var37
    return result
def func10():
    closure = [-4]
    def func9(arg10, arg11):
        closure[0] += func11(arg10, arg11)
        return closure[0]
    func = func9
    return func
var12 = func10()
def func8(arg5, arg6):
    var7 = 0
    for var8 in range(32):
        var7 += var7 | arg5 ^ -1
    return var7
def func7():
    func5()
    result = len(range(24))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -3
def func4():
    func2()
    result = len(range(14))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var4 = func7()
    var9 = func8(arg2, var4)
    var39 = var12(var4, var3)
    if var39 < var9:
        var44 = class12()
    else:
        var44 = class14()
    for var45 in xrange(32):
        var44.func13(arg2, arg1)
    var46 = (arg1 - var39 | arg2) + var9
    var47 = (-953235430 & var39) & (var9 & var39)
    var48 = var46 & arg2
    var49 = var3 + ((var48 | var48) - var4)
    var50 = var39 - var4
    var51 = ((arg2 - var3) | arg1) ^ var4
    var52 = arg2 | arg1
    var53 = var46 + ((var50 | -1974924000) - var46)
    var54 = arg2 ^ (var51 & var9)
    var55 = var48 + var50 + var51 ^ var9
    var56 = var46 ^ var52
    result = (arg1 | var48 ^ var49) & var53 ^ var39 ^ var51 - arg2 - arg2 - var4
    return result
class class14(object):
    def func13(self, arg42, arg43):
        result = arg42 + arg42
        return result
class class12(object):
    def func13(self, arg40, arg41):
        return 0
def func11(arg13, arg14):
    var15 = arg14 & (792868112 | -757 ^ 1287072858)
    if arg13 < var15:
        var16 = -67820944 - 129006027 ^ (748 - -820)
    else:
        var16 = (38 - -361 | -969) + arg13
    var17 = var15 & arg14 - var15 | var15
    var18 = var15 & 677 - arg13 ^ 164
    var19 = (-1822936242 & arg14 ^ arg13) ^ var17
    var20 = var19 | var18 + var15 ^ var18
    var21 = arg13 | var20
    var22 = (314 ^ var17 | var17) ^ var17
    var23 = (var17 - var22 ^ var15) & var18
    var24 = (var19 & var18 | var15) ^ var19
    var25 = (var15 + var20 | var20) - var24
    var26 = var24 - var18
    var27 = var17 - var26 + var23 - var19
    var28 = arg13 + -153269841
    var29 = var17 ^ var27 | var28 | var18
    var30 = (var19 ^ var18) - var28 + 1916630973
    var31 = (var18 ^ (var28 & var21)) - 273
    var32 = var17 + var25
    var33 = var15 - var22
    var34 = (var18 + arg14 + var33) | var29
    var35 = (var30 & var23) | var21
    var36 = (var21 & var32 + var23) | var15
    var37 = var36 ^ var31 | arg14
    var38 = var23 ^ var31
    result = var30 | var37
    return result
def func10():
    closure = [-4]
    def func9(arg10, arg11):
        closure[0] += func11(arg10, arg11)
        return closure[0]
    func = func9
    return func
var12 = func10()
def func8(arg5, arg6):
    var7 = 0
    for var8 in range(32):
        var7 += var7 | arg5 ^ -1
    return var7
def func7():
    func5()
    result = len(range(24))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -3
def func4():
    func2()
    result = len(range(14))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 4
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 57'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
